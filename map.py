import json
import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium
from folium.plugins import MarkerCluster
import math
import re
import io

# ==================== ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ====================
st.set_page_config(
    page_title="‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå",
    page_icon="üìç",
    layout="wide"
)

# ==================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ====================

@st.cache_data
def ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•(‡πÑ‡∏ü‡∏•‡πå_path):
    """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä"""
    with open(‡πÑ‡∏ü‡∏•‡πå_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return pd.DataFrame(data)


def ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î(val):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ -> (lat, lon) ‡∏´‡∏£‡∏∑‡∏≠ (None, None)"""
    try:
        if val is None:
            return (None, None)

        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö list/tuple: [lat, lon]
        if isinstance(val, (list, tuple)) and len(val) >= 2:
            try:
                lat, lon = float(val[0]), float(val[1])
                if math.isfinite(lat) and math.isfinite(lon):
                    return (lat, lon)
            except (ValueError, TypeError):
                return (None, None)

        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö string: "lat,lon" ‡∏´‡∏£‡∏∑‡∏≠ "lat lon"
        if isinstance(val, str):
            s = val.strip()
            if s:
                parts = re.split(r'[,\s]+', s)
                if len(parts) >= 2:
                    try:
                        lat = float(parts[0].replace(',', '.'))
                        lon = float(parts[1].replace(',', '.'))
                        if math.isfinite(lat) and math.isfinite(lon):
                            return (lat, lon)
                    except (ValueError, TypeError):
                        pass
        
        return (None, None)
    except Exception:
        return (None, None)


def ‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î(row):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏™‡∏≤‡∏Ç‡∏≤'
    if '‡∏™‡∏≤‡∏Ç‡∏≤' in row.index and row['‡∏™‡∏≤‡∏Ç‡∏≤']:
        try:
            branches = row['‡∏™‡∏≤‡∏Ç‡∏≤'] or []
            for b in branches:
                coord_raw = None
                if isinstance(b, dict):
                    coord_raw = b.get('‡∏û‡∏¥‡∏Å‡∏±‡∏î')
                elif isinstance(b, (list, tuple)) and len(b) > 2:
                    coord_raw = b[2]
                
                lat, lon = ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î(coord_raw)
                if lat is not None and lon is not None:
                    return True
        except Exception:
            pass
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå lat/lon
    lat_candidates = [c for c in row.index if c and 'lat' in c.lower()]
    lon_candidates = [c for c in row.index if c and ('lon' in c.lower() or 'lng' in c.lower())]
    
    if lat_candidates and lon_candidates:
        try:
            lat_val = row[lat_candidates[0]]
            lon_val = row[lon_candidates[0]]
            
            if isinstance(lat_val, (int, float)) and isinstance(lon_val, (int, float)):
                lat_f, lon_f = float(lat_val), float(lon_val)
            else:
                lat_f, lon_f = ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î([lat_val, lon_val])
            
            if lat_f is not None and lon_f is not None:
                return True
        except Exception:
            pass
    
    return False


@st.cache_data
def ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏î(df_json):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏≤‡∏Å DataFrame (‡∏°‡∏µ‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)"""
    df = pd.read_json(io.StringIO(df_json), orient='split')
    markers = []
    
    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏™‡∏≤‡∏Ç‡∏≤'
    if '‡∏™‡∏≤‡∏Ç‡∏≤' in df.columns:
        for _, row in df.iterrows():
            company = row.get('‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '')
            license_no = row.get('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '')
            branches = row.get('‡∏™‡∏≤‡∏Ç‡∏≤', [])
            
            if isinstance(branches, list):
                for b in branches:
                    addr = phone = coord_raw = None
                    
                    if isinstance(b, dict):
                        addr = b.get('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà')
                        phone = b.get('‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
                        coord_raw = b.get('‡∏û‡∏¥‡∏Å‡∏±‡∏î')
                    elif isinstance(b, (list, tuple)) and len(b) >= 3:
                        addr, phone, coord_raw = b[0], b[1], b[2]
                    
                    lat, lon = ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î(coord_raw)
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô NaN
                    if (lat is not None and lon is not None and 
                        math.isfinite(lat) and math.isfinite(lon)):
                        popup = f"üè¢ {company}\nüìç {addr or ''}\nüìû {phone or ''}\nüìã {license_no}"
                        markers.append({'lat': lat, 'lon': lon, 'popup': popup})
    
    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå lat/lon
    if not markers:
        lat_cols = [c for c in df.columns if c and 'lat' in c.lower()]
        lon_cols = [c for c in df.columns if c and ('lon' in c.lower() or 'lng' in c.lower())]
        
        if lat_cols and lon_cols:
            lat_col, lon_col = lat_cols[0], lon_cols[0]
            
            for _, row in df.iterrows():
                try:
                    lat_raw = row.get(lat_col)
                    lon_raw = row.get(lon_col)
                    
                    if isinstance(lat_raw, (int, float)) and isinstance(lon_raw, (int, float)):
                        lat, lon = float(lat_raw), float(lon_raw)
                    else:
                        lat, lon = ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î([lat_raw, lon_raw])
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô NaN
                    if (lat is not None and lon is not None and 
                        math.isfinite(lat) and math.isfinite(lon)):
                        popup = f"üè¢ {row.get('‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '')}\nüìã {row.get('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '')}"
                        markers.append({'lat': lat, 'lon': lon, 'popup': popup})
                except Exception:
                    continue
    
    return markers


def ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà(markers):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà folium ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏î"""
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    center_lat, center_lon = 13.736, 100.518  # ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if markers:
        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ None, NaN)
        valid_lats = [m['lat'] for m in markers if m.get('lat') is not None and math.isfinite(float(m['lat']))]
        valid_lons = [m['lon'] for m in markers if m.get('lon') is not None and math.isfinite(float(m['lon']))]
        
        if valid_lats and valid_lons:
            center_lat = sum(valid_lats) / len(valid_lats)
            center_lon = sum(valid_lons) / len(valid_lons)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if not (math.isfinite(center_lat) and math.isfinite(center_lon)):
        center_lat, center_lon = 13.736, 100.518
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    m = folium.Map(
        location=[center_lat, center_lon],
        zoom_start=7 if len(markers) > 1 else 12,
        tiles='OpenStreetMap'
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡∏´‡∏≠‡πÑ‡∏≠‡πÄ‡∏ü‡∏¥‡∏• (‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö)
    folium.Marker(
        location=[13.7818, 100.5351],
        popup=folium.Popup("<b>üóº ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö</b><br>‡∏´‡∏≠‡πÑ‡∏≠‡πÄ‡∏ü‡∏¥‡∏•", max_width=250),
        tooltip="üóº ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö",
        icon=folium.Icon(color='red', icon='tower-broadcast', prefix='fa')
    ).add_to(m)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    mc = MarkerCluster().add_to(m)
    
    for mrec in markers:
        lat, lon = mrec.get('lat'), mrec.get('lon')
        
        if lat is None or lon is None:
            continue
        
        try:
            lat_f, lon_f = float(lat), float(lon)
            if not (math.isfinite(lat_f) and math.isfinite(lon_f)):
                continue
            
            popup_text = mrec.get('popup', '')
            tooltip_text = popup_text.split('\n')[0] if popup_text else None
            
            folium.Marker(
                location=[lat_f, lon_f],
                popup=folium.Popup(popup_text, max_width=300),
                tooltip=tooltip_text,
                icon=folium.Icon(color='blue', icon='info-sign')
            ).add_to(mc)
        except Exception:
            continue
    
    return m


# ==================== ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ====================

def main():
    st.title("üìç ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå")
    st.markdown("---")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try:
        df = ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•('data/merged_pico_companies.json')
    except FileNotFoundError:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå data/merged_pico_companies.json")
        st.info("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return
    
    # ‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
    st.sidebar.header("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.sidebar.markdown("---")
    
    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
    regions = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î']
    if '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ' in df.columns:
        regions += sorted(df['‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'].dropna().unique().tolist())
    selected_region = st.sidebar.selectbox('üó∫Ô∏è ‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ', regions, index=0)
    
    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    prov_candidates = []
    if '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î' in df.columns:
        if selected_region != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' and '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ' in df.columns:
            prov_candidates = df.loc[df['‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'] == selected_region, '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique().tolist()
        else:
            prov_candidates = df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique().tolist()
    provinces = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + sorted(prov_candidates)
    selected_province = st.sidebar.selectbox('üèôÔ∏è ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', provinces, index=0)
    
    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    name_query = st.sidebar.text_input('üè¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', placeholder='‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó...')
    
    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
    coords_only = st.sidebar.checkbox('üìå ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î', value=False)
    
    st.sidebar.markdown("---")
    
    # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
    filtered_df = df.copy()
    
    if selected_region != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        filtered_df = filtered_df[filtered_df['‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'] == selected_region]
    
    if selected_province != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
        filtered_df = filtered_df[filtered_df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'] == selected_province]
    
    if name_query and '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó' in filtered_df.columns:
        filtered_df = filtered_df[
            filtered_df['‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó'].astype(str).str.contains(name_query, case=False, na=False)
        ]
    
    if coords_only:
        filtered_df = filtered_df[filtered_df.apply(‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î, axis=1)]
    
    filtered_df = filtered_df.reset_index(drop=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(df):,}")
    with col2:
        st.metric("‚úÖ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á", f"{len(filtered_df):,}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏î (‡∏°‡∏µ‡πÅ‡∏Ñ‡∏ä)
    df_json = filtered_df.to_json(orient='split')
    markers = ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏î(df_json)
    
    with col3:
        st.metric("üìç ‡∏à‡∏∏‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", f"{len(markers):,}")
    
    st.markdown("---")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if markers:
        m = ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà(markers)
        st_folium(m, width=1200, height=700, returned_objects=[])
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á")
        st.info("üí° ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
        
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if st.sidebar.checkbox("üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value=False):
        st.markdown("---")
        st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á")
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        display_cols = [col for col in ['‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'] 
                       if col in filtered_df.columns]
        
        if display_cols:
            st.dataframe(
                filtered_df[display_cols], 
                use_container_width=True,
                height=400
            )
        else:
            st.dataframe(filtered_df, use_container_width=True, height=400)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        csv = filtered_df.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV",
            data=csv,
            file_name="filtered_companies.csv",
            mime="text/csv"
        )
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
    - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    - ‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏π‡∏°‡∏≠‡∏≠‡∏Å
    """)


if __name__ == "__main__":
    main()